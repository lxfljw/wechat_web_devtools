module.exports=function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}return o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=2)}([function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=o(8),r=o(9),i=o(10),a=o(11),s=o(1),c="http://127.0.0.1",p={SUCCESS:"SUCCESS",FAIL:"FAIL",CANCEL:"CANCEL",REQUEST:"REQUEST",PENDING:"PENDING",EXPIRED:"EXPIRED"};let l,u;class d extends r{constructor(e){super(),this.onUpdate=e}getPort(){return this.port}update(e){this.port=e,this.onUpdate(e),this.emit("update",e)}reset(){this.port=void 0}}t.idePortManager=new d(e=>l=e),t.cliPortManager=new d(e=>u=e);let f=3799;function m(e){let t=f,o=n.createServer(()=>{});o.on("error",t=>{f++,m(e)}),o.listen(t,"127.0.0.1",n=>{o.once("close",()=>{f=t+1,e(t)}),o.close()})}function g(){return new Promise((e,o)=>{l?e(l):t.idePortManager.once("update",t=>{e(t)})})}function h(e,o){return new Promise(async(n,r)=>{try{const i=await a({url:`${c}:${o}/updatePort?port=${e}`,timeout:1e3,resolveWithFullResponse:!0});200===i.statusCode?(t.idePortManager.update(o),n()):(console.error("err:",i),r(i.status))}catch(e){e&&e.error&&("ETIMEOUT"===e.error.code||e.error.code),r(e)}})}function b(e){const t=e.length,o=e.match(/.+?\n/g),n=e.match(/[^\n]+?$/);if(!o)return void console.log(e);const r=function(e,t){let o=1;for(;e/o>8e3;)o++;if(1==o)return[];let n=t.length+1,r=Math.floor(n/o),i=[];for(let e=1;e<o;e++)i.push(r*e);return i}(t,o);if(0===r.length)console.log(e);else{for(var i=0;i<r.length;i++)console.log(o.slice(r[i-1]||0,r[i]).join("").slice(0,-1));console.log(o.slice(r[r.length-1]).join("")+n)}}function w(){const e={cli:"1"};return global.from&&(e.from=global.from),new i.URLSearchParams(e)}t.getAvailablePort=function(){return new Promise(m)},t.startServer=function(e){return new Promise((o,r)=>{try{n.createServer((e,o)=>{try{if(!e.url)return;const r=e.url.match(/^\/updatePort\?port=(\d+)$/);if(r&&r[1]&&parseInt(r[1])&&!isNaN(parseInt(r[1]))){const e=parseInt(r[1]);t.idePortManager.update(e),console.log(`IDE server has started, listening on http://127.0.0.1:${e}`),o.statusCode=200,o.end()}else n.request({host:c,port:l,path:e.url,method:e.method},e=>{e.pipe(o)}).end()}catch(e){o.end()}}).listen(e,"127.0.0.1"),o()}catch(e){r(e)}})},t.getIDEPort=g,t.notifyCLIPort=h,t.openIDE=function(e){return new Promise(async(t,o)=>{try{const n=await g(),r=w();e&&r.set("projectpath",encodeURIComponent(e)),200===(await a({url:`${c}:${n}/open?${r.toString()}`,resolveWithFullResponse:!0})).statusCode?t():o(new Error("Fail to open IDE"))}catch(e){o(e)}})},t.checkIDEStatus=function(){return new Promise(async(e,o)=>{if(l)try{await h(u,l),e(s.IDEStatus.Online)}catch(o){e(s.IDEStatus.Offline),t.idePortManager.reset()}else e(s.IDEStatus.Offline),t.idePortManager.reset()})},t.login=(e=>new Promise(async(t,o)=>{let{qrFormat:n,qrOutput:r,resultOutput:i}=e;const s=await g();try{n=n||"terminal";const e=w();e.set("format",n),r&&e.set("qroutput",encodeURIComponent(r)),i&&e.set("resultoutput",encodeURIComponent(i));const t=await a({url:`${c}:${s}/login?${e.toString()}`});r||b(t)}catch(e){o(e.toString())}try{await new Promise((e,t)=>{!async function e(t,o){try{let n=await a({url:`${c}:${s}/loginresult`});if(n)switch((n=JSON.parse(n)).loginStatus){case p.SUCCESS:t();break;case p.PENDING:setTimeout(e.bind(this),300,t,o);break;case p.CANCEL:o("login cancelled "+n.loginStatusMsg);break;case p.EXPIRED:o("login expired "+n.loginStatusMsg);break;case p.FAIL:default:o("login failed "+n.loginStatusMsg)}else o("Error while getting login result")}catch(e){o(e)}}(e,t)})}catch(e){o(e.toString())}t()})),t.preview=(e=>new Promise(async(t,o)=>{const{projectpath:n,format:r="terminal",qroutput:i,infoOutput:s,compileCondition:p}=e;if(!n)return void o("project path must be provided");const l=await g();try{const e=w();e.set("projectpath",encodeURIComponent(n)),e.set("format",r),e.set("qroutput",encodeURIComponent(i||"")),e.set("infooutput",encodeURIComponent(s||"")),e.set("compilecondition",encodeURIComponent(p||""));const u=await a({url:`${c}:${l}/preview?${e.toString()}`});i||b(u),t()}catch(e){o(e.toString())}})),t.upload=(e=>new Promise(async(t,o)=>{const{projectpath:n,version:r,desc:i,format:s="terminal",qroutput:p,infoOutput:l}=e;if(!n||!r)return void o("version and project path must be provided");const u=await g();try{const e=w();e.set("projectpath",encodeURIComponent(n)),e.set("version",encodeURIComponent(r)),e.set("desc",encodeURIComponent(i||"")),e.set("infooutput",encodeURIComponent(l||""));const s=await a({url:`${c}:${u}/upload?${e.toString()}`,resolveWithFullResponse:!0});200!==s.statusCode&&o(s.body),p||console.log(s.body),t()}catch(e){o(e)}})),t.autoTest=(e=>new Promise(async(t,o)=>{const{projectpath:n}=e;if(!n)return void o("project path must be provided");const r=await g();try{const e=w();e.set("projectpath",encodeURIComponent(n));const i=await a({url:`${c}:${r}/test?${e.toString()}`,resolveWithFullResponse:!0});200!==i.statusCode&&o(i.body),t()}catch(e){o(e&&e.error)}})),t.getMinicode=(e=>new Promise(async(t,o)=>{const{link:n,dest:r}=e;if(!n||!r)return void o("minicode link / ID & target dir must be provided");const i=await g();try{const e=w();e.set("link",encodeURIComponent(n)),e.set("dest",encodeURIComponent(r));const s=await a({url:`${c}:${i}/minicode?${e.toString()}`,resolveWithFullResponse:!0});200!==s.statusCode&&o(s.body),t()}catch(e){o(e&&e.error)}})),t.buildNpm=(e=>new Promise(async(t,o)=>{const{projectpath:n,compiletype:r}=e;if(!n)return void o("project path must be provided");const i=await g();try{const e=w();e.set("projectpath",encodeURIComponent(n)),e.set("compiletype",encodeURIComponent(r||""));const s=await a({url:`${c}:${i}/buildnpm?${e.toString()}`,resolveWithFullResponse:!0});200!==s.statusCode?o(s.body):console.log(s.body),t()}catch(e){o(e&&e.error)}}))},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.Online=0]="Online",e[e.Offline=1]="Offline"}(t.IDEStatus||(t.IDEStatus={}))},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=o(3),r=o(4),i=o(5),a=o(6),s=o(0),c="darwin"===process.platform;process.on("uncaughtException",e=>{console.error(`Runtime error: ${e.name} \n ${e.toString()}`)}),async function(){try{const e=process.argv.indexOf("--idev")>-1;global.isDev=e;try{if(e)if(c){const e=JSON.parse(n.readFileSync(r.join(__dirname,"../../../../../dist/package.json"),"utf8"));global.userDirName=e.name,global.appname=e.appname,global.userDirPath=r.join(process.env.HOME||"~",`Library/Application Support/${global.userDirName}/Default`),global.appPath=`../../../MacOS/${global.appname}`}else{const e=JSON.parse(n.readFileSync(r.join(__dirname,"../../../../../dist/package.json"),"utf8"));global.userDirName=e.name,global.appname=e.name,global.userDirPath=r.join(process.env.USERPROFILE||"~",`AppData/Local/${global.userDirName}/User Data/Default`),global.appPath=`./${global.appname}.exe`}else if(c){const e=JSON.parse(n.readFileSync(r.join(__dirname,"../../../package.json"),"utf8"));global.userDirName=e.name,global.appname=e.appname,global.userDirPath=r.join(process.env.HOME||"~",`Library/Application Support/${global.userDirName}/Default`),global.appPath=r.join(__dirname,`../../../../../MacOS/${global.appname}`)}else{const e=JSON.parse(n.readFileSync(r.join(__dirname,"../../../package.json"),"utf8"));global.userDirName=e.name,global.appname=e.name,global.userDirPath=r.join(process.env.USERPROFILE||"~",`AppData/Local/${global.userDirName}/User Data/Default`),global.appPath=`./${global.appname}.exe`}}catch(e){console.log("File corrupted, please re-install")}const t=process.argv.slice();let o,p="",l=t.indexOf("--inspect");l>-1&&t.splice(l,1),(l=t.indexOf("--idev"))>-1&&t.splice(l,1),(l=t.indexOf("--nw"))>-1&&t.splice(l,2),(l=t.indexOf("-f"))>-1?(p=t[l+1],t.splice(l,2)):(l=t.indexOf("--from"))>-1&&(p=t[l+1],t.splice(l,2)),p&&(global.from=p),i.version("1.0.0").allowUnknownOption().option("-o, --open [path]","Open IDE. If path is specified, IDE will try to open the project in the path.").option("-l, --login","Login").option("--login-qr-output [format@path]","Customize output of QR Code. format can be terminal or base64 or image. If path is used, QR code will be written to the path").option("--login-result-output <path>","Customize output of login result, login result will be written to the provided path").option("-p, --preview <project_root>","Preview mini program").option("--preview-qr-output [format@path]","Customize output of QR Code. format can be terminal or base64. If path is used, QR code will be written to the path").option("--preview-info-output [path]","Output path of extra information generated during preview, such as package size including subpackages. Output format is JSON").option("--compile-condition <condition>","set the compile condiction for preview").option("-u, --upload <version@project_root>","Upload mini program").option("--upload-desc <desc>","Description of the uploaded version").option("--upload-info-output [path]","Output path of extra information generated during upload, such as package size including subpackages. Output format is JSON").option("-t, --test <project_root>","Request an auto mobile test").option("--get-minicode <link@path>","get minicode and download to target directory").option("--build-npm <project_root>","Build NPM").option("--build-npm-compile-type <type>",'Override the compile type ("miniprogram" or "plugin") in project.config.json only for building NPM').parse(t),console.info("Initializing...");try{o=await s.getAvailablePort(),s.cliPortManager.update(o),await s.startServer(o);let t=global.userDirPath,i=r.join(t,".cli");try{n.writeFileSync(i,o,"utf8")}catch(e){throw console.error("Please ensure that the IDE has been properly installed"),e}let c,p=r.join(t,".ide");try{console.log(`idePortFile: ${p}`),c=parseInt(n.readFileSync(p,"utf8")),await s.notifyCLIPort(o,c),console.log(`IDE server has started, listening on http://127.0.0.1:${c}`)}catch(t){console.info("starting ide..."),a.start(o,e)}await s.getIDEPort(),console.log("initialization finished")}catch(e){return void console.error("init error: ",e)}if(i.open&&("boolean"==typeof i.open?await a.open():await a.open(i.open),console.log("open IDE success")),i.login){console.info("initializing login...");const e={};if(i.loginQrOutput){const t=i.loginQrOutput,o=t.match&&t.match(/^(.+?)(?:@(.*))?$/)||[];e.qrFormat=o[1],e.qrOutput=o[2]}i.loginResultOutput&&(e.resultOutput=i.loginResultOutput),await s.login(e),console.log("login success")}if(i.preview){console.info("preparing preview...");const e={projectpath:decodeURIComponent(i.preview)};if(i.previewQrOutput){const t=i.previewQrOutput,o=t.match&&t.match(/^(.+?)(?:@(.*))?$/)||[];e.format=o[1],e.qroutput=o[2]}i.previewInfoOutput&&(e.infoOutput=i.previewInfoOutput),i.compileCondition&&(e.compileCondition=i.compileCondition),await s.preview(e),console.log("preview success")}if(i.upload){console.info("uploading project...");const e=i.upload,t=e.match&&e.match(/^(.+?)(?:@(.*))?$/)||[],o={version:t[1],projectpath:decodeURIComponent(t[2]),desc:i.uploadDesc};if(i.uploadQrOutput){const e=i.uploadQrOutput,t=e.match&&e.match(/^(.+?)(?:@(.*))?$/)||[];o.format=t[1],o.qroutput=t[2]}i.uploadInfoOutput&&(o.infoOutput=i.uploadInfoOutput),await s.upload(o),console.log("upload success")}if(i.test){console.info("test project...");const e=i.test;e&&!0!==e?(await s.autoTest({projectpath:decodeURIComponent(i.test)}),console.log("submit test success")):console.log("projectpath must be provided")}if(i.getMinicode){console.info("get minicode...");const e=i.getMinicode,t=e.match&&e.match(/^(.+?)(?:@(.*))?$/)||[],o={link:t[1],dest:t[2]};await s.getMinicode(o),console.log("getMinicode success")}if(i.buildNpm){console.info("building npm...");const e={projectpath:decodeURIComponent(i.buildNpm),compiletype:i.buildNpmCompileType};await s.buildNpm(e),console.log("build npm success",i.buildNpm)}i.interactive||i.server||process.exit(0)}catch(e){console.error(e),process.exit(-1)}}()},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("commander")},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=o(7),r=o(0),i=o(1),a=(process.platform,"../../../../dist");t.start=((e,t)=>{if(t){let t,o=process.argv.indexOf("--nw");t=o>-1?process.argv[o+1]:"nw";const r=process.argv.indexOf("--inspect")>-1;n.spawn(t,[".","--cli",e.toString(),r?"--inspect":""],{cwd:a,detached:!0,stdio:[0,1,2]}).unref()}else{n.spawn(global.appPath,["--cli",e.toString()],{detached:!0,stdio:"ignore"}).unref()}}),t.open=(e=>new Promise(async(o,n)=>{try{if(await r.checkIDEStatus()===i.IDEStatus.Offline){const o=r.cliPortManager.getPort();o?(t.start(o,process.argv.indexOf("--idev")>-1),await r.getIDEPort(),await r.openIDE(e)):n("CLI error")}else await r.openIDE(e),o()}catch(e){n(e?e.toString():"")}}))},function(e,t){e.exports=require("child_process")},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("events")},function(e,t){e.exports=require("url")},function(e,t){e.exports=require("request-promise-native")}]);